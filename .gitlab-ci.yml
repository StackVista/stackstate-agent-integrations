image: artifactory.tooling.stackstate.io/docker-virtual/stackstate/stackstate-agent-integrations-runner:20240528-py311
stages:
  - build
  - test
  - publish

variables:
  CONDA_ENV: "stackstate-agent-integrations-py-3"
  PYTHON_VERSION: 3.11.8

.rules:
  - &pull_requests
    if: $CI_EXTERNAL_PULL_REQUEST_IID
  - &base_changes
    if: $CI_EXTERNAL_PULL_REQUEST_IID
    changes:
      - stackstate_checks_base/*
      - stackstate_checks_base/**/*
      - stackstate_checks_dev/*
      - stackstate_checks_dev/**/*
      - stackstate_checks_tests_helper/*
      - stackstate_checks_tests_helper/**/*
      - .gitlab-ci.yml
      - $CHECK/*
      - $CHECK/**/*
  - &master_branch
    if: '$CI_COMMIT_BRANCH == "master"'
  - &release_branch
    if: $CI_COMMIT_TAG
  - &base_manual_changes

    if: $CI_EXTERNAL_PULL_REQUEST_IID
    changes:
      - stackstate_checks_base/*
      - stackstate_checks_base/**/*
      - stackstate_checks_dev/*
      - stackstate_checks_dev/**/*
      - stackstate_checks_tests_helper/*
      - stackstate_checks_tests_helper/**/*
      - .gitlab-ci.yml
      - $CHECK/*
      - $CHECK/**/*
    when: manual
    allow_failure: true
  - &master_manual_branch
    if: '$CI_COMMIT_BRANCH == "master"'
    when: manual
    allow_failure: true
  - &release_manual_branch
    if: $CI_COMMIT_TAG
    when: manual
    allow_failure: true

.base_integration_rules:
  &base_integration_rules
  rules:
    - <<: *base_changes
    - <<: *master_branch
    - <<: *release_branch

.base_integration_manual_rules:
  &base_integration_manual_rules
  rules:
    - <<: *base_manual_changes
    - <<: *master_manual_branch
    - <<: *release_manual_branch

.base_job_rules:
  &base_job_rules
  rules:
    - <<: *pull_requests
    - <<: *master_branch
    - <<: *release_branch

.manual_job_rules:
  &manual_job_rules
  rules:
    - <<: *pull_requests
      when: manual
      allow_failure: true
    - <<: *master_branch
      when: manual
      allow_failure: true
    - <<: *release_branch
      when: manual
      allow_failure: true

.linux_env: &linux_env
  before_script:
    - source .setup-scripts/setup_env.sh

.windows_env: &windows_env
  tags:
    - windows_agent7_ps1
  before_script:
    - Import-Module C:\tools\miniconda3\shell\condabin\conda-hook.ps1
    - ./.setup-scripts/conda_env.ps1 $CONDA_ENV $PYTHON_VERSION
    - conda activate $CONDA_ENV
    - python -m pip install .\stackstate_checks_dev[cli]

print_env:
  <<: *linux_env
  <<: *manual_job_rules
  stage: build
  script:
    - printenv
  interruptible: true

docker:
  <<: *manual_job_rules
  image: ${DOCKER_PROXY_URL}/docker:20-git
  stage: build
  script:
    - echo "${docker_password}" | docker login --username=${docker_user} --password-stdin docker.io
    - echo "${quay_password}" | docker login --username=${quay_user} --password-stdin quay.io
    - echo "${artifactory_password}" | docker login --username=${artifactory_user} --password-stdin artifactory.tooling.stackstate.io
    - apk add make
    - cd .setup-scripts/image
    - make build
    - make push
    - if [ "${CI_COMMIT_REF_NAME}" = "master" ]; then make tag_latest; make push_latest; fi
  services:
    - alias: docker
      command:
        - --experimental
        - --tls=false
      name: ${DOCKER_PROXY_URL}/docker:20-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""


linux_deps:
  <<: *linux_env
  <<: *base_job_rules
  stage: build
  interruptible: true
  script:
    - source .setup-scripts/load_deps.sh
  artifacts:
    paths:
      - venv/
    expire_in: 1 week

win_deps:
  <<: *windows_env
  <<: *manual_job_rules
  stage: build
  interruptible: true
  script:
    - conda activate $CONDA_ENV
    - python -m pip install .\stackstate_checks_dev[cli]
  artifacts:
    paths:
      - venv/
    expire_in: 1 week

.linux_test: &linux_test
  <<: *linux_env
  <<: *base_integration_rules
  stage: test
  needs:
    - linux_deps
  services:
    - name: docker:19.03.5-dind
      ## Overriding the entrypoint to exclude the /var/run/docker.sock because we also mount it
      entrypoint: ["dockerd-entrypoint.sh", "/usr/local/bin/dockerd", "--host=tcp://0.0.0.0:2375" ]
  script:
    - .setup-scripts/setup_vsphere_artifactory_publishing.sh
    - .setup-scripts/setup_artifactory_docker.sh
    - checksdev test --cov ${CHECK}
    - checksdev test ${CHECK} --bench || true
      # [BS] we skip this until https://github.com/PyCQA/pylint/pull/2681/commits/253e5d05e3943d3bc8e4470804a138cb20049548 lands in pylint stable version
      # - if [ -n "$PYTHON3" ]; then checksdev validate py3 ${CHECK}; fi
  interruptible: true

test_stackstate_checks_base:
  <<: *linux_test
  variables:
    CHECK: "stackstate_checks_base"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
  script:
    - checksdev validate config
    - checksdev validate dep
    - checksdev validate manifest --include-extras
    - checksdev validate metadata
    - checksdev validate service-checks
    - checksdev test --cov ${CHECK}
    - checksdev test ${CHECK} --bench || true

test_stackstate_checks_dev:
  <<: *linux_test
  variables:
    CHECK: "stackstate_checks_dev"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  tags:
    - sts-k8s-xl-no-docker-runner

test_kubernetes:
  <<: *linux_test
  variables:
    CHECK: "kubernetes"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2

test_dynatrace_base:
  <<: *linux_test
  variables:
    CHECK: "dynatrace_base"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2

test_dynatrace_topology:
  <<: *linux_test
  variables:
    CHECK: "dynatrace_topology"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2

test_dynatrace_health:
  <<: *linux_test
  variables:
    CHECK: "dynatrace_health"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2


test_kubelet:
  <<: *linux_test
  variables:
    CHECK: "kubelet"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2

test_mysql:
  <<: *linux_test
  variables:
    CHECK: "mysql"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  tags:
    #- sts-k8s-xl-runner
    #- sts-aws
    - sts-k8s-xl-no-docker-runner

test_openmetrics:
  <<: *linux_test
  variables:
    CHECK: "openmetrics"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2

test_postgres:
  <<: *linux_test
  variables:
    CHECK: "postgres"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  tags:
    - sts-k8s-xl-no-docker-runner

test_splunk_topology:
  <<: *linux_test
  variables:
    CHECK: "splunk_topology"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  tags:
    - sts-k8s-xl-no-docker-runner

test_splunk_health:
  <<: *linux_test
  variables:
    CHECK: "splunk_health"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  tags:
    - sts-k8s-xl-no-docker-runner

test_splunk_metric:
  <<: *linux_test
  variables:
    CHECK: "splunk_metric"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  tags:
    - sts-k8s-xl-no-docker-runner

test_splunk_event:
  <<: *linux_test
  variables:
    CHECK: "splunk_event"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  tags:
    - sts-k8s-xl-no-docker-runner

test_cloudera:
  <<: *linux_test
  variables:
    CHECK: "cloudera"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2

test_aws_topology:
  <<: *linux_test
  variables:
    CHECK: "aws_topology"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2

test_aws_xray:
  <<: *linux_test
  variables:
    CHECK: "aws_xray"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2

test_sap:
  <<: *linux_test
  variables:
    CHECK: "sap"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2

test_agent_integration_sample:
  <<: *linux_test
  variables:
    CHECK: "agent_integration_sample"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2

test_agent_v2_integration_sample:
  <<: *linux_test
  variables:
    CHECK: "agent_v2_integration_sample"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2

test_agent_v2_integration_stateful_sample:
  <<: *linux_test
  variables:
    CHECK: "agent_v2_integration_stateful_sample"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2

test_agent_v2_integration_transactional_sample:
  <<: *linux_test
  variables:
    CHECK: "agent_v2_integration_transactional_sample"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2

test_vsphere:
  <<: *linux_test
  variables:
    CHECK: "vsphere"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2

test_zabbix:
  <<: *linux_test
  variables:
    CHECK: "zabbix"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2

test_splunk_base:
  <<: *linux_test
  variables:
    CHECK: "splunk_base"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2

test_servicenow:
  <<: *linux_test
  variables:
    CHECK: "servicenow"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2

test_static_topology:
  <<: *linux_test
  variables:
    CHECK: "static_topology"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2

test_static_health:
  <<: *linux_test
  variables:
    CHECK: "static_health"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2

test_nagios:
  <<: *linux_test
  variables:
    CHECK: "nagios"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2

test_solarwinds:
  <<: *linux_test
  variables:
    CHECK: "solarwinds"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2


.windows_test: &windows_test
  <<: *windows_env
  <<: *base_integration_manual_rules
  stage: test
  needs:
    - win_deps
  script:
    - conda activate $CONDA_ENV
    - checksdev test -c %CHECK%
  interruptible: true
  tags:
    - windows_agent7_ps1
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
      - script_failure

test_stackstate_checks_dev_win:
  <<: *windows_test
  variables:
    CHECK: "stackstate_checks_dev:py3-default,stackstate_checks_dev:flake8"

test_stackstate_checks_base_win:
  <<: *windows_test
  variables:
    CHECK: "stackstate_checks_base"

test_wmi_check:
  <<: *windows_test
  variables:
    CHECK: "wmi_check"

test_cloudera_win:
  <<: *windows_test
  variables:
    CHECK: "cloudera"

test_aws_xray_win:
  <<: *windows_test
  variables:
    CHECK: "aws_xray"

publish-checks-dev:
  stage: publish
  interruptible: true
  script:
    - source .setup-scripts/setup_artifactory_publishing.sh
    - export VERSION=`./.setup-scripts/version.sh`
    - echo "__version__ = \"$VERSION\"" > stackstate_checks_dev/stackstate_checks/dev/__about__.py
    - cd stackstate_checks_dev && python setup.py sdist bdist_wheel upload -r local
  <<: *manual_job_rules
