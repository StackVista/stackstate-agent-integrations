image: stackstate/stackstate-agent-integrations-runner:latest

stages:
  - build
  - test
  - publish

.linux_env: &linux_env
  before_script:
    - source .setup-scripts/setup_env.sh

.windows_env: &windows_env
  tags:
    - sts_windows
  before_script:
    - call .setup-scripts/windows_setup_env.cmd

linux_deps:
  <<: *linux_env
  stage: build
  cache:
    key: "stackstate-agent-integrations-build-cache"
    paths:
      - venv
  script:
    - source $CI_PROJECT_DIR/.setup-scripts/load_deps.sh
  artifacts:
    paths:
      - venv
    expire_in: 1 week

win_deps:
  <<: *windows_env
  stage: build
  cache:
    key: "stackstate-agent-integrations-windows-build-cache"
    paths:
      - venv
  script:
    - call .setup-scripts/windows_load_env.cmd
  artifacts:
    paths:
      - venv
    expire_in: 1 week

clear-caches:
  cache:
    policy: push
    key: "stackstate-agent-integrations-build-cache"
    paths:
      - venv
  when: manual
  stage: build
  script:
    - rm -rf venv || true

clear-win-caches:
  cache:
    policy: push
    key: "stackstate-agent-integrations-windows-build-cache"
    paths:
      - venv
  when: manual
  stage: build
  script:
    - "if exist %WIN_CI_PROJECT_DIR%\\venv rd /s/q %WIN_CI_PROJECT_DIR%\\venv"
  tags:
    - sts_windows

.linux_test: &linux_test
  <<: *linux_env
  stage: test
  dependencies:
    - linux_deps
  services:
    - name: docker:dind
      ## Overriding the entrypoint to exclude the /var/run/docker.sock because we also mount it
      entrypoint: ["dockerd-entrypoint.sh", "/usr/local/bin/dockerd", "--host=tcp://0.0.0.0:2375" ]
  script:
    - checksdev test --cov ${CHECK}
    - checksdev test ${CHECK} --bench || true
      # [BS] we skip this until https://github.com/PyCQA/pylint/pull/2681/commits/253e5d05e3943d3bc8e4470804a138cb20049548 lands in pylint stable version
      # - if [ -n "$PYTHON3" ]; then checksdev validate py3 ${CHECK}; fi

test_stackstate_checks_base:
  <<: *linux_test
  variables:
    CHECK: "stackstate_checks_base"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
  script:
    - checksdev validate config
    - checksdev validate dep
    - checksdev validate manifest --include-extras
    - checksdev validate metadata
    - checksdev validate service-checks
    - checksdev test --cov ${CHECK}
    - checksdev test ${CHECK} --bench || true

test_stackstate_checks_dev:
  <<: *linux_test
  variables:
    CHECK: "stackstate_checks_dev"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2

test_mysql:
  <<: *linux_test
  variables:
    CHECK: "mysql"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2

test_postgres:
  <<: *linux_test
  variables:
    CHECK: "postgres"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2

test_cloudera:
  <<: *linux_test
  variables:
    CHECK: "cloudera"
    PYTHON3: "true"
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2

.windows_test: &windows_test
  <<: *windows_env
  stage: test
  dependencies:
    - win_deps
  script:
    - checksdev test -c %CHECK%
  tags:
    - sts_windows

test_stackstate_checks_dev_win:
  <<: *windows_test
  variables:
    CHECK: "stackstate_checks_dev:py27-default,stackstate_checks_dev:flake8"

test_stackstate_checks_base_win:
  <<: *windows_test
  variables:
    CHECK: "stackstate_checks_base"

test_wmi_check:
  <<: *windows_test
  variables:
    CHECK: "wmi_check"

test_cloudera_win:
  <<: *windows_test
  variables:
    CHECK: "cloudera"

publish-checks-dev:
  stage: publish
  script:
    - source ./.setup-scripts/setup_artifactory_publishing.sh
    - export VERSION=`./.setup-scripts/version.sh`
    - echo "__version__ = \"$VERSION\"" > stackstate_checks_dev/stackstate_checks/dev/__about__.py
    - cd stackstate_checks_dev && python setup.py sdist bdist_wheel upload -r local

