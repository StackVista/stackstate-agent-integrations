AWSTemplateFormatVersion: "2010-09-09"
Description: >
  A sample setup, emulating a real-world infrastructure creating xray
  traces with Lambda function and Dynamodb components.

Resources:
  XrayDynamoDB:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: Book
      AttributeDefinitions:
        - AttributeName: Author
          AttributeType: S
        - AttributeName: Title
          AttributeType: S
      KeySchema:
        - AttributeName: Author
          KeyType: HASH
        - AttributeName: Title
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  XrayLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: Xray_Lambda_Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
            Sid: ''
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Sid: lambda
                Effect: Allow
                Action:
                  - lambda:*
                Resource: "*"
              - Sid: dynamodb
                Effect: Allow
                Action:
                  - dynamodb:*
                Resource: !GetAtt XrayDynamoDB.Arn

  XrayCreateLamdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: TestCreateTrace
      MemorySize: 128
      TracingConfig:
        Mode: Active
      Handler: index.lambda_handler
      Runtime: python3.7
      Timeout: 100
      Code:
        ZipFile: |
          import json
          import logging
          import os
          import random

          import boto3
          from aws_xray_sdk.core import xray_recorder
          from aws_xray_sdk.core import patch
          from boto3.dynamodb.conditions import Key

          logging.basicConfig()
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          test_region = os.environ['AWS_DEFAULT_REGION']
          patch(['boto3'])
          lambda_client = boto3.client('lambda', region_name=test_region)

          def lambda_handler(event, context):
              logger.info('## EVENT')
              logger.info(event)

              raise_error = random.choice([True, False])
              if raise_error:
                  raise ValueError("Random error for testing traces!")

              list_lambdas()
              call_lambda(event)
              item_writen = do_something()

              return item_writen


          @xray_recorder.capture('add_item_to_book_table')
          def do_something():
              dynamo_db = boto3.resource('dynamodb', region_name=test_region)
              table = dynamo_db.Table('Book')
              resp = table.query(KeyConditionExpression=Key('Author').eq('Douglas Adams'))
              if len(resp['Items']) == 0:
                  with table.batch_writer() as batch:
                      batch.put_item(Item={'Author': 'Douglas Adams',
                                           'Title': "The Hitchhiker 's Guide to the Galaxy",
                                           'Category': 'Science fiction',
                                           'Formats': {'Hardcover': 'GVJZQ7JK',
                                                       'Paperback': 'A4TFUR98',
                                                       'Audiobook': 'XWMGHW96'}
                                           })
                  item_writen = True
                  msg = 'Item writen'
              else:
                  item_writen = False
                  msg = 'Item in table'

              xray_recorder.current_subsegment().put_annotation('add_item_to_book_table', msg)
              return item_writen


          @xray_recorder.capture('list_lambdas')
          def list_lambdas():
              funcs = lambda_client.list_functions()
              msg = 'num of functions {}'.format(len(funcs['Functions']))
              logger.info(msg)
              xray_recorder.current_subsegment().put_annotation('list_lambdas', msg)


          def call_lambda(event):
              response = lambda_client.invoke(FunctionName='TestDeleteTrace', InvocationType='RequestResponse',
                                              Payload=json.dumps(event))
              payload = response['Payload'].read()
              logger.info(payload)
      Role: !GetAtt XrayLambdaRole.Arn

  XrayDeleteLamdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: TestDeleteTrace
      MemorySize: 128
      TracingConfig:
        Mode: Active
      Handler: index.lambda_handler
      Runtime: python3.7
      Timeout: 100
      Code:
        ZipFile: |
          from __future__ import print_function
          import json
          import os
          import boto3
          from aws_xray_sdk.core import xray_recorder, patch
          from boto3.dynamodb.conditions import Key

          test_region = os.environ['AWS_DEFAULT_REGION']

          def lambda_handler(event, context):
              print(json.dumps(event))

              msg = delete_item_from_table()

              return {
                  'statusCode': 200,
                  'body': json.dumps({'message': msg})
              }


          @xray_recorder.capture('delete_item_from_table')
          def delete_item_from_table():
              dynamo_db = boto3.resource('dynamodb', region_name=test_region)
              table = dynamo_db.Table('Book')
              resp = table.query(KeyConditionExpression=Key('Author').eq('Douglas Adams'))
              if len(resp) != 0:
                  table.delete_item(Key={'Author': 'Douglas Adams', 'Title': "The Hitchhiker 's Guide to the Galaxy"})
                  item_deleted = True
                  msg = 'item deleted'
              else:
                  item_deleted = False
                  msg = 'item not found'
              xray_recorder.current_subsegment().put_annotation('delete_item_from_table', msg)
              return msg

      Role: !GetAtt XrayLambdaRole.Arn
